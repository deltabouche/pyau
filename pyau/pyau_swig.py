# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyau_swig', [dirname(__file__)])
        except ImportError:
            import _pyau_swig
            return _pyau_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_pyau_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyau_swig = swig_import_helper()
    del swig_import_helper
else:
    import _pyau_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyau_swig.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pyau_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyau_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyau_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyau_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyau_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyau_swig.SwigPyIterator_copy(self)

    def next(self):
        return _pyau_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _pyau_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _pyau_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyau_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyau_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyau_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyau_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyau_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyau_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyau_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyau_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_Float32p():
    return _pyau_swig.new_Float32p()
new_Float32p = _pyau_swig.new_Float32p

def copy_Float32p(value):
    return _pyau_swig.copy_Float32p(value)
copy_Float32p = _pyau_swig.copy_Float32p

def delete_Float32p(obj):
    return _pyau_swig.delete_Float32p(obj)
delete_Float32p = _pyau_swig.delete_Float32p

def Float32p_assign(obj, value):
    return _pyau_swig.Float32p_assign(obj, value)
Float32p_assign = _pyau_swig.Float32p_assign

def Float32p_value(obj):
    return _pyau_swig.Float32p_value(obj)
Float32p_value = _pyau_swig.Float32p_value
class AHAudioUnitPtrList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyau_swig.AHAudioUnitPtrList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyau_swig.AHAudioUnitPtrList___nonzero__(self)

    def __bool__(self):
        return _pyau_swig.AHAudioUnitPtrList___bool__(self)

    def __len__(self):
        return _pyau_swig.AHAudioUnitPtrList___len__(self)

    def pop(self):
        return _pyau_swig.AHAudioUnitPtrList_pop(self)

    def __getslice__(self, i, j):
        return _pyau_swig.AHAudioUnitPtrList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyau_swig.AHAudioUnitPtrList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyau_swig.AHAudioUnitPtrList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyau_swig.AHAudioUnitPtrList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyau_swig.AHAudioUnitPtrList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyau_swig.AHAudioUnitPtrList___setitem__(self, *args)

    def append(self, x):
        return _pyau_swig.AHAudioUnitPtrList_append(self, x)

    def empty(self):
        return _pyau_swig.AHAudioUnitPtrList_empty(self)

    def size(self):
        return _pyau_swig.AHAudioUnitPtrList_size(self)

    def clear(self):
        return _pyau_swig.AHAudioUnitPtrList_clear(self)

    def swap(self, v):
        return _pyau_swig.AHAudioUnitPtrList_swap(self, v)

    def get_allocator(self):
        return _pyau_swig.AHAudioUnitPtrList_get_allocator(self)

    def begin(self):
        return _pyau_swig.AHAudioUnitPtrList_begin(self)

    def end(self):
        return _pyau_swig.AHAudioUnitPtrList_end(self)

    def rbegin(self):
        return _pyau_swig.AHAudioUnitPtrList_rbegin(self)

    def rend(self):
        return _pyau_swig.AHAudioUnitPtrList_rend(self)

    def pop_back(self):
        return _pyau_swig.AHAudioUnitPtrList_pop_back(self)

    def erase(self, *args):
        return _pyau_swig.AHAudioUnitPtrList_erase(self, *args)

    def __init__(self, *args):
        this = _pyau_swig.new_AHAudioUnitPtrList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _pyau_swig.AHAudioUnitPtrList_push_back(self, x)

    def front(self):
        return _pyau_swig.AHAudioUnitPtrList_front(self)

    def back(self):
        return _pyau_swig.AHAudioUnitPtrList_back(self)

    def assign(self, n, x):
        return _pyau_swig.AHAudioUnitPtrList_assign(self, n, x)

    def resize(self, *args):
        return _pyau_swig.AHAudioUnitPtrList_resize(self, *args)

    def insert(self, *args):
        return _pyau_swig.AHAudioUnitPtrList_insert(self, *args)

    def pop_front(self):
        return _pyau_swig.AHAudioUnitPtrList_pop_front(self)

    def push_front(self, x):
        return _pyau_swig.AHAudioUnitPtrList_push_front(self, x)

    def remove(self, x):
        return _pyau_swig.AHAudioUnitPtrList_remove(self, x)

    def unique(self):
        return _pyau_swig.AHAudioUnitPtrList_unique(self)

    def reverse(self):
        return _pyau_swig.AHAudioUnitPtrList_reverse(self)

    def sort(self):
        return _pyau_swig.AHAudioUnitPtrList_sort(self)

    def merge(self, x):
        return _pyau_swig.AHAudioUnitPtrList_merge(self, x)
    __swig_destroy__ = _pyau_swig.delete_AHAudioUnitPtrList
    __del__ = lambda self: None
AHAudioUnitPtrList_swigregister = _pyau_swig.AHAudioUnitPtrList_swigregister
AHAudioUnitPtrList_swigregister(AHAudioUnitPtrList)

class AHTrackPtrVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyau_swig.AHTrackPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyau_swig.AHTrackPtrVector___nonzero__(self)

    def __bool__(self):
        return _pyau_swig.AHTrackPtrVector___bool__(self)

    def __len__(self):
        return _pyau_swig.AHTrackPtrVector___len__(self)

    def pop(self):
        return _pyau_swig.AHTrackPtrVector_pop(self)

    def __getslice__(self, i, j):
        return _pyau_swig.AHTrackPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyau_swig.AHTrackPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyau_swig.AHTrackPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyau_swig.AHTrackPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyau_swig.AHTrackPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyau_swig.AHTrackPtrVector___setitem__(self, *args)

    def append(self, x):
        return _pyau_swig.AHTrackPtrVector_append(self, x)

    def empty(self):
        return _pyau_swig.AHTrackPtrVector_empty(self)

    def size(self):
        return _pyau_swig.AHTrackPtrVector_size(self)

    def clear(self):
        return _pyau_swig.AHTrackPtrVector_clear(self)

    def swap(self, v):
        return _pyau_swig.AHTrackPtrVector_swap(self, v)

    def get_allocator(self):
        return _pyau_swig.AHTrackPtrVector_get_allocator(self)

    def begin(self):
        return _pyau_swig.AHTrackPtrVector_begin(self)

    def end(self):
        return _pyau_swig.AHTrackPtrVector_end(self)

    def rbegin(self):
        return _pyau_swig.AHTrackPtrVector_rbegin(self)

    def rend(self):
        return _pyau_swig.AHTrackPtrVector_rend(self)

    def pop_back(self):
        return _pyau_swig.AHTrackPtrVector_pop_back(self)

    def erase(self, *args):
        return _pyau_swig.AHTrackPtrVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyau_swig.new_AHTrackPtrVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _pyau_swig.AHTrackPtrVector_push_back(self, x)

    def front(self):
        return _pyau_swig.AHTrackPtrVector_front(self)

    def back(self):
        return _pyau_swig.AHTrackPtrVector_back(self)

    def assign(self, n, x):
        return _pyau_swig.AHTrackPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _pyau_swig.AHTrackPtrVector_resize(self, *args)

    def insert(self, *args):
        return _pyau_swig.AHTrackPtrVector_insert(self, *args)

    def reserve(self, n):
        return _pyau_swig.AHTrackPtrVector_reserve(self, n)

    def capacity(self):
        return _pyau_swig.AHTrackPtrVector_capacity(self)
    __swig_destroy__ = _pyau_swig.delete_AHTrackPtrVector
    __del__ = lambda self: None
AHTrackPtrVector_swigregister = _pyau_swig.AHTrackPtrVector_swigregister
AHTrackPtrVector_swigregister(AHTrackPtrVector)

class AHParameterList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyau_swig.AHParameterList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyau_swig.AHParameterList___nonzero__(self)

    def __bool__(self):
        return _pyau_swig.AHParameterList___bool__(self)

    def __len__(self):
        return _pyau_swig.AHParameterList___len__(self)

    def pop(self):
        return _pyau_swig.AHParameterList_pop(self)

    def __getslice__(self, i, j):
        return _pyau_swig.AHParameterList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyau_swig.AHParameterList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyau_swig.AHParameterList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyau_swig.AHParameterList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyau_swig.AHParameterList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyau_swig.AHParameterList___setitem__(self, *args)

    def append(self, x):
        return _pyau_swig.AHParameterList_append(self, x)

    def empty(self):
        return _pyau_swig.AHParameterList_empty(self)

    def size(self):
        return _pyau_swig.AHParameterList_size(self)

    def clear(self):
        return _pyau_swig.AHParameterList_clear(self)

    def swap(self, v):
        return _pyau_swig.AHParameterList_swap(self, v)

    def get_allocator(self):
        return _pyau_swig.AHParameterList_get_allocator(self)

    def begin(self):
        return _pyau_swig.AHParameterList_begin(self)

    def end(self):
        return _pyau_swig.AHParameterList_end(self)

    def rbegin(self):
        return _pyau_swig.AHParameterList_rbegin(self)

    def rend(self):
        return _pyau_swig.AHParameterList_rend(self)

    def pop_back(self):
        return _pyau_swig.AHParameterList_pop_back(self)

    def erase(self, *args):
        return _pyau_swig.AHParameterList_erase(self, *args)

    def __init__(self, *args):
        this = _pyau_swig.new_AHParameterList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _pyau_swig.AHParameterList_push_back(self, x)

    def front(self):
        return _pyau_swig.AHParameterList_front(self)

    def back(self):
        return _pyau_swig.AHParameterList_back(self)

    def assign(self, n, x):
        return _pyau_swig.AHParameterList_assign(self, n, x)

    def resize(self, *args):
        return _pyau_swig.AHParameterList_resize(self, *args)

    def insert(self, *args):
        return _pyau_swig.AHParameterList_insert(self, *args)

    def pop_front(self):
        return _pyau_swig.AHParameterList_pop_front(self)

    def push_front(self, x):
        return _pyau_swig.AHParameterList_push_front(self, x)

    def reverse(self):
        return _pyau_swig.AHParameterList_reverse(self)
    __swig_destroy__ = _pyau_swig.delete_AHParameterList
    __del__ = lambda self: None
AHParameterList_swigregister = _pyau_swig.AHParameterList_swigregister
AHParameterList_swigregister(AHParameterList)

class CAComponentList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyau_swig.CAComponentList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyau_swig.CAComponentList___nonzero__(self)

    def __bool__(self):
        return _pyau_swig.CAComponentList___bool__(self)

    def __len__(self):
        return _pyau_swig.CAComponentList___len__(self)

    def pop(self):
        return _pyau_swig.CAComponentList_pop(self)

    def __getslice__(self, i, j):
        return _pyau_swig.CAComponentList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyau_swig.CAComponentList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyau_swig.CAComponentList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyau_swig.CAComponentList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyau_swig.CAComponentList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyau_swig.CAComponentList___setitem__(self, *args)

    def append(self, x):
        return _pyau_swig.CAComponentList_append(self, x)

    def empty(self):
        return _pyau_swig.CAComponentList_empty(self)

    def size(self):
        return _pyau_swig.CAComponentList_size(self)

    def clear(self):
        return _pyau_swig.CAComponentList_clear(self)

    def swap(self, v):
        return _pyau_swig.CAComponentList_swap(self, v)

    def get_allocator(self):
        return _pyau_swig.CAComponentList_get_allocator(self)

    def begin(self):
        return _pyau_swig.CAComponentList_begin(self)

    def end(self):
        return _pyau_swig.CAComponentList_end(self)

    def rbegin(self):
        return _pyau_swig.CAComponentList_rbegin(self)

    def rend(self):
        return _pyau_swig.CAComponentList_rend(self)

    def pop_back(self):
        return _pyau_swig.CAComponentList_pop_back(self)

    def erase(self, *args):
        return _pyau_swig.CAComponentList_erase(self, *args)

    def __init__(self, *args):
        this = _pyau_swig.new_CAComponentList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _pyau_swig.CAComponentList_push_back(self, x)

    def front(self):
        return _pyau_swig.CAComponentList_front(self)

    def back(self):
        return _pyau_swig.CAComponentList_back(self)

    def assign(self, n, x):
        return _pyau_swig.CAComponentList_assign(self, n, x)

    def resize(self, *args):
        return _pyau_swig.CAComponentList_resize(self, *args)

    def insert(self, *args):
        return _pyau_swig.CAComponentList_insert(self, *args)

    def pop_front(self):
        return _pyau_swig.CAComponentList_pop_front(self)

    def push_front(self, x):
        return _pyau_swig.CAComponentList_push_front(self, x)

    def reverse(self):
        return _pyau_swig.CAComponentList_reverse(self)
    __swig_destroy__ = _pyau_swig.delete_CAComponentList
    __del__ = lambda self: None
CAComponentList_swigregister = _pyau_swig.CAComponentList_swigregister
CAComponentList_swigregister(CAComponentList)

class FloatVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyau_swig.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyau_swig.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pyau_swig.FloatVector___bool__(self)

    def __len__(self):
        return _pyau_swig.FloatVector___len__(self)

    def pop(self):
        return _pyau_swig.FloatVector_pop(self)

    def __getslice__(self, i, j):
        return _pyau_swig.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyau_swig.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyau_swig.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyau_swig.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyau_swig.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyau_swig.FloatVector___setitem__(self, *args)

    def append(self, x):
        return _pyau_swig.FloatVector_append(self, x)

    def empty(self):
        return _pyau_swig.FloatVector_empty(self)

    def size(self):
        return _pyau_swig.FloatVector_size(self)

    def clear(self):
        return _pyau_swig.FloatVector_clear(self)

    def swap(self, v):
        return _pyau_swig.FloatVector_swap(self, v)

    def get_allocator(self):
        return _pyau_swig.FloatVector_get_allocator(self)

    def begin(self):
        return _pyau_swig.FloatVector_begin(self)

    def end(self):
        return _pyau_swig.FloatVector_end(self)

    def rbegin(self):
        return _pyau_swig.FloatVector_rbegin(self)

    def rend(self):
        return _pyau_swig.FloatVector_rend(self)

    def pop_back(self):
        return _pyau_swig.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pyau_swig.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyau_swig.new_FloatVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _pyau_swig.FloatVector_push_back(self, x)

    def front(self):
        return _pyau_swig.FloatVector_front(self)

    def back(self):
        return _pyau_swig.FloatVector_back(self)

    def assign(self, n, x):
        return _pyau_swig.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pyau_swig.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pyau_swig.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pyau_swig.FloatVector_reserve(self, n)

    def capacity(self):
        return _pyau_swig.FloatVector_capacity(self)
    __swig_destroy__ = _pyau_swig.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _pyau_swig.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatVectorList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyau_swig.FloatVectorList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyau_swig.FloatVectorList___nonzero__(self)

    def __bool__(self):
        return _pyau_swig.FloatVectorList___bool__(self)

    def __len__(self):
        return _pyau_swig.FloatVectorList___len__(self)

    def pop(self):
        return _pyau_swig.FloatVectorList_pop(self)

    def __getslice__(self, i, j):
        return _pyau_swig.FloatVectorList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyau_swig.FloatVectorList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyau_swig.FloatVectorList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyau_swig.FloatVectorList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyau_swig.FloatVectorList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyau_swig.FloatVectorList___setitem__(self, *args)

    def append(self, x):
        return _pyau_swig.FloatVectorList_append(self, x)

    def empty(self):
        return _pyau_swig.FloatVectorList_empty(self)

    def size(self):
        return _pyau_swig.FloatVectorList_size(self)

    def clear(self):
        return _pyau_swig.FloatVectorList_clear(self)

    def swap(self, v):
        return _pyau_swig.FloatVectorList_swap(self, v)

    def get_allocator(self):
        return _pyau_swig.FloatVectorList_get_allocator(self)

    def begin(self):
        return _pyau_swig.FloatVectorList_begin(self)

    def end(self):
        return _pyau_swig.FloatVectorList_end(self)

    def rbegin(self):
        return _pyau_swig.FloatVectorList_rbegin(self)

    def rend(self):
        return _pyau_swig.FloatVectorList_rend(self)

    def pop_back(self):
        return _pyau_swig.FloatVectorList_pop_back(self)

    def erase(self, *args):
        return _pyau_swig.FloatVectorList_erase(self, *args)

    def __init__(self, *args):
        this = _pyau_swig.new_FloatVectorList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _pyau_swig.FloatVectorList_push_back(self, x)

    def front(self):
        return _pyau_swig.FloatVectorList_front(self)

    def back(self):
        return _pyau_swig.FloatVectorList_back(self)

    def assign(self, n, x):
        return _pyau_swig.FloatVectorList_assign(self, n, x)

    def resize(self, *args):
        return _pyau_swig.FloatVectorList_resize(self, *args)

    def insert(self, *args):
        return _pyau_swig.FloatVectorList_insert(self, *args)

    def pop_front(self):
        return _pyau_swig.FloatVectorList_pop_front(self)

    def push_front(self, x):
        return _pyau_swig.FloatVectorList_push_front(self, x)

    def reverse(self):
        return _pyau_swig.FloatVectorList_reverse(self)
    __swig_destroy__ = _pyau_swig.delete_FloatVectorList
    __del__ = lambda self: None
FloatVectorList_swigregister = _pyau_swig.FloatVectorList_swigregister
FloatVectorList_swigregister(FloatVectorList)

class FloatVectorListVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _pyau_swig.FloatVectorListVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyau_swig.FloatVectorListVector___nonzero__(self)

    def __bool__(self):
        return _pyau_swig.FloatVectorListVector___bool__(self)

    def __len__(self):
        return _pyau_swig.FloatVectorListVector___len__(self)

    def pop(self):
        return _pyau_swig.FloatVectorListVector_pop(self)

    def __getslice__(self, i, j):
        return _pyau_swig.FloatVectorListVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyau_swig.FloatVectorListVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyau_swig.FloatVectorListVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyau_swig.FloatVectorListVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyau_swig.FloatVectorListVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyau_swig.FloatVectorListVector___setitem__(self, *args)

    def append(self, x):
        return _pyau_swig.FloatVectorListVector_append(self, x)

    def empty(self):
        return _pyau_swig.FloatVectorListVector_empty(self)

    def size(self):
        return _pyau_swig.FloatVectorListVector_size(self)

    def clear(self):
        return _pyau_swig.FloatVectorListVector_clear(self)

    def swap(self, v):
        return _pyau_swig.FloatVectorListVector_swap(self, v)

    def get_allocator(self):
        return _pyau_swig.FloatVectorListVector_get_allocator(self)

    def begin(self):
        return _pyau_swig.FloatVectorListVector_begin(self)

    def end(self):
        return _pyau_swig.FloatVectorListVector_end(self)

    def rbegin(self):
        return _pyau_swig.FloatVectorListVector_rbegin(self)

    def rend(self):
        return _pyau_swig.FloatVectorListVector_rend(self)

    def pop_back(self):
        return _pyau_swig.FloatVectorListVector_pop_back(self)

    def erase(self, *args):
        return _pyau_swig.FloatVectorListVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyau_swig.new_FloatVectorListVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _pyau_swig.FloatVectorListVector_push_back(self, x)

    def front(self):
        return _pyau_swig.FloatVectorListVector_front(self)

    def back(self):
        return _pyau_swig.FloatVectorListVector_back(self)

    def assign(self, n, x):
        return _pyau_swig.FloatVectorListVector_assign(self, n, x)

    def resize(self, *args):
        return _pyau_swig.FloatVectorListVector_resize(self, *args)

    def insert(self, *args):
        return _pyau_swig.FloatVectorListVector_insert(self, *args)

    def reserve(self, n):
        return _pyau_swig.FloatVectorListVector_reserve(self, n)

    def capacity(self):
        return _pyau_swig.FloatVectorListVector_capacity(self)
    __swig_destroy__ = _pyau_swig.delete_FloatVectorListVector
    __del__ = lambda self: None
FloatVectorListVector_swigregister = _pyau_swig.FloatVectorListVector_swigregister
FloatVectorListVector_swigregister(FloatVectorListVector)


_pyau_swig.kAudioUnitScope_Global_swigconstant(_pyau_swig)
kAudioUnitScope_Global = _pyau_swig.kAudioUnitScope_Global

_pyau_swig.kAudioUnitScope_Input_swigconstant(_pyau_swig)
kAudioUnitScope_Input = _pyau_swig.kAudioUnitScope_Input

_pyau_swig.kAudioUnitScope_Output_swigconstant(_pyau_swig)
kAudioUnitScope_Output = _pyau_swig.kAudioUnitScope_Output

_pyau_swig.kAudioUnitScope_Group_swigconstant(_pyau_swig)
kAudioUnitScope_Group = _pyau_swig.kAudioUnitScope_Group

_pyau_swig.kAudioUnitScope_Part_swigconstant(_pyau_swig)
kAudioUnitScope_Part = _pyau_swig.kAudioUnitScope_Part

_pyau_swig.kAudioUnitScope_Note_swigconstant(_pyau_swig)
kAudioUnitScope_Note = _pyau_swig.kAudioUnitScope_Note
class AudioUnitParameterInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_pyau_swig.AudioUnitParameterInfo_name_get, _pyau_swig.AudioUnitParameterInfo_name_set)
    unitName = _swig_property(_pyau_swig.AudioUnitParameterInfo_unitName_get, _pyau_swig.AudioUnitParameterInfo_unitName_set)
    clumpID = _swig_property(_pyau_swig.AudioUnitParameterInfo_clumpID_get, _pyau_swig.AudioUnitParameterInfo_clumpID_set)
    cfNameString = _swig_property(_pyau_swig.AudioUnitParameterInfo_cfNameString_get, _pyau_swig.AudioUnitParameterInfo_cfNameString_set)
    unit = _swig_property(_pyau_swig.AudioUnitParameterInfo_unit_get, _pyau_swig.AudioUnitParameterInfo_unit_set)
    minValue = _swig_property(_pyau_swig.AudioUnitParameterInfo_minValue_get, _pyau_swig.AudioUnitParameterInfo_minValue_set)
    maxValue = _swig_property(_pyau_swig.AudioUnitParameterInfo_maxValue_get, _pyau_swig.AudioUnitParameterInfo_maxValue_set)
    defaultValue = _swig_property(_pyau_swig.AudioUnitParameterInfo_defaultValue_get, _pyau_swig.AudioUnitParameterInfo_defaultValue_set)
    flags = _swig_property(_pyau_swig.AudioUnitParameterInfo_flags_get, _pyau_swig.AudioUnitParameterInfo_flags_set)

    def __init__(self):
        this = _pyau_swig.new_AudioUnitParameterInfo()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyau_swig.delete_AudioUnitParameterInfo
    __del__ = lambda self: None
AudioUnitParameterInfo_swigregister = _pyau_swig.AudioUnitParameterInfo_swigregister
AudioUnitParameterInfo_swigregister(AudioUnitParameterInfo)

class CAComponent(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyau_swig.new_CAComponent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyau_swig.delete_CAComponent
    __del__ = lambda self: None

    def IsValid(self):
        return _pyau_swig.CAComponent_IsValid(self)

    def HasAUStrings(self):
        return _pyau_swig.CAComponent_HasAUStrings(self)

    def GetAUManu(self):
        return _pyau_swig.CAComponent_GetAUManu(self)

    def GetAUName(self):
        return _pyau_swig.CAComponent_GetAUName(self)

    def GetCompName(self):
        return _pyau_swig.CAComponent_GetCompName(self)

    def Desc(self):
        return _pyau_swig.CAComponent_Desc(self)

    def Open(self, outInst):
        return _pyau_swig.CAComponent_Open(self, outInst)

    def GetVersion(self, outVersion):
        return _pyau_swig.CAComponent_GetVersion(self, outVersion)

    def Comp(self):
        return _pyau_swig.CAComponent_Comp(self)

    def Print(self, *args):
        return _pyau_swig.CAComponent_Print(self, *args)

    def Save(self, outData):
        return _pyau_swig.CAComponent_Save(self, outData)

    def Restore(self, inData):
        return _pyau_swig.CAComponent_Restore(self, inData)
CAComponent_swigregister = _pyau_swig.CAComponent_swigregister
CAComponent_swigregister(CAComponent)

class CAAudioUnit(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyau_swig.new_CAAudioUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    Open = staticmethod(_pyau_swig.CAAudioUnit_Open)
    __swig_destroy__ = _pyau_swig.delete_CAAudioUnit
    __del__ = lambda self: None

    def Close(self):
        return _pyau_swig.CAAudioUnit_Close(self)

    def __eq__(self, *args):
        return _pyau_swig.CAAudioUnit___eq__(self, *args)

    def IsValid(self):
        return _pyau_swig.CAAudioUnit_IsValid(self)

    def AU(self):
        return _pyau_swig.CAAudioUnit_AU(self)

    def Comp(self):
        return _pyau_swig.CAAudioUnit_Comp(self)

    def FromAUGraph(self):
        return _pyau_swig.CAAudioUnit_FromAUGraph(self)

    def GetAUNode(self):
        return _pyau_swig.CAAudioUnit_GetAUNode(self)

    def Initialize(self):
        return _pyau_swig.CAAudioUnit_Initialize(self)

    def Uninitialize(self):
        return _pyau_swig.CAAudioUnit_Uninitialize(self)

    def GetPropertyInfo(self, propID, scope, element, outDataSize, outWritable):
        return _pyau_swig.CAAudioUnit_GetPropertyInfo(self, propID, scope, element, outDataSize, outWritable)

    def GetProperty(self, propID, scope, element, outData, ioDataSize):
        return _pyau_swig.CAAudioUnit_GetProperty(self, propID, scope, element, outData, ioDataSize)

    def SetProperty(self, propID, scope, element, inData, inDataSize):
        return _pyau_swig.CAAudioUnit_SetProperty(self, propID, scope, element, inData, inDataSize)

    def SetParameter(self, inID, scope, element, value, bufferOffsetFrames=0):
        return _pyau_swig.CAAudioUnit_SetParameter(self, inID, scope, element, value, bufferOffsetFrames)

    def GetParameter(self, inID, scope, element, outValue):
        return _pyau_swig.CAAudioUnit_GetParameter(self, inID, scope, element, outValue)

    def Render(self, ioActionFlags, inTimeStamp, inOutputBusNumber, inNumberFrames, ioData):
        return _pyau_swig.CAAudioUnit_Render(self, ioActionFlags, inTimeStamp, inOutputBusNumber, inNumberFrames, ioData)

    def Reset(self, scope, element):
        return _pyau_swig.CAAudioUnit_Reset(self, scope, element)

    def GlobalReset(self):
        return _pyau_swig.CAAudioUnit_GlobalReset(self)

    def AddRenderNotify(self, inProc, inProcRefCon):
        return _pyau_swig.CAAudioUnit_AddRenderNotify(self, inProc, inProcRefCon)

    def RemoveRenderNotify(self, inProc, inProcRefCon):
        return _pyau_swig.CAAudioUnit_RemoveRenderNotify(self, inProc, inProcRefCon)

    def AddPropertyListener(self, inID, inProc, inProcRefCon):
        return _pyau_swig.CAAudioUnit_AddPropertyListener(self, inID, inProc, inProcRefCon)

    def RemovePropertyListener(self, inID, inProc, inProcUserData):
        return _pyau_swig.CAAudioUnit_RemovePropertyListener(self, inID, inProc, inProcUserData)

    def MIDIEvent(self, inStatus, inData1, inData2, inOffsetSampleFrame):
        return _pyau_swig.CAAudioUnit_MIDIEvent(self, inStatus, inData1, inData2, inOffsetSampleFrame)

    def StartNote(self, *args):
        return _pyau_swig.CAAudioUnit_StartNote(self, *args)

    def StopNote(self, inGroupID, inNoteInstanceID, inOffsetSampleFrame):
        return _pyau_swig.CAAudioUnit_StopNote(self, inGroupID, inNoteInstanceID, inOffsetSampleFrame)

    def CanDo(self, *args):
        return _pyau_swig.CAAudioUnit_CanDo(self, *args)

    def SupportsNumChannels(self):
        return _pyau_swig.CAAudioUnit_SupportsNumChannels(self)

    def HasChannelLayouts(self, inScope, inEl):
        return _pyau_swig.CAAudioUnit_HasChannelLayouts(self, inScope, inEl)

    def GetChannelLayoutTags(self, inScope, inEl, outChannelVector):
        return _pyau_swig.CAAudioUnit_GetChannelLayoutTags(self, inScope, inEl, outChannelVector)

    def HasChannelLayout(self, inScope, inEl):
        return _pyau_swig.CAAudioUnit_HasChannelLayout(self, inScope, inEl)

    def GetChannelLayout(self, inScope, inEl, outLayout):
        return _pyau_swig.CAAudioUnit_GetChannelLayout(self, inScope, inEl, outLayout)

    def SetChannelLayout(self, *args):
        return _pyau_swig.CAAudioUnit_SetChannelLayout(self, *args)

    def ClearChannelLayout(self, inScope, inEl):
        return _pyau_swig.CAAudioUnit_ClearChannelLayout(self, inScope, inEl)

    def GetFormat(self, inScope, inEl, outFormat):
        return _pyau_swig.CAAudioUnit_GetFormat(self, inScope, inEl, outFormat)

    def SetFormat(self, inScope, inEl, inFormat):
        return _pyau_swig.CAAudioUnit_SetFormat(self, inScope, inEl, inFormat)

    def GetSampleRate(self, inScope, inEl, outRate):
        return _pyau_swig.CAAudioUnit_GetSampleRate(self, inScope, inEl, outRate)

    def SetSampleRate(self, *args):
        return _pyau_swig.CAAudioUnit_SetSampleRate(self, *args)

    def NumberChannels(self, inScope, inEl, outChans):
        return _pyau_swig.CAAudioUnit_NumberChannels(self, inScope, inEl, outChans)

    def GetNumberChannels(self, inScope, inEl, outChans):
        return _pyau_swig.CAAudioUnit_GetNumberChannels(self, inScope, inEl, outChans)

    def SetNumberChannels(self, inScope, inEl, inChans):
        return _pyau_swig.CAAudioUnit_SetNumberChannels(self, inScope, inEl, inChans)

    def IsElementCountWritable(self, inScope, outWritable):
        return _pyau_swig.CAAudioUnit_IsElementCountWritable(self, inScope, outWritable)

    def GetElementCount(self, inScope, outCount):
        return _pyau_swig.CAAudioUnit_GetElementCount(self, inScope, outCount)

    def SetElementCount(self, inScope, inCount):
        return _pyau_swig.CAAudioUnit_SetElementCount(self, inScope, inCount)

    def HasDynamicInputs(self, outTotalNumChannels):
        return _pyau_swig.CAAudioUnit_HasDynamicInputs(self, outTotalNumChannels)

    def HasDynamicOutputs(self, outTotalNumChannels):
        return _pyau_swig.CAAudioUnit_HasDynamicOutputs(self, outTotalNumChannels)

    def ConfigureDynamicInput(self, inNumElements, inChannelsPerElement, inSampleRate):
        return _pyau_swig.CAAudioUnit_ConfigureDynamicInput(self, inNumElements, inChannelsPerElement, inSampleRate)

    def ConfigureDynamicOutput(self, inNumElements, inChannelsPerElement, inSampleRate):
        return _pyau_swig.CAAudioUnit_ConfigureDynamicOutput(self, inNumElements, inChannelsPerElement, inSampleRate)

    def CanBypass(self):
        return _pyau_swig.CAAudioUnit_CanBypass(self)

    def GetBypass(self):
        return _pyau_swig.CAAudioUnit_GetBypass(self)

    def SetBypass(self, inBypass):
        return _pyau_swig.CAAudioUnit_SetBypass(self, inBypass)

    def Latency(self):
        return _pyau_swig.CAAudioUnit_Latency(self)

    def GetAUPreset(self, outData):
        return _pyau_swig.CAAudioUnit_GetAUPreset(self, outData)

    def SetAUPreset(self, inData):
        return _pyau_swig.CAAudioUnit_SetAUPreset(self, inData)

    def SetAUPresetFromDocument(self, inData):
        return _pyau_swig.CAAudioUnit_SetAUPresetFromDocument(self, inData)

    def GetPresentPreset(self, outData):
        return _pyau_swig.CAAudioUnit_GetPresentPreset(self, outData)

    def SetPresentPreset(self, inData):
        return _pyau_swig.CAAudioUnit_SetPresentPreset(self, inData)

    def HasCustomView(self):
        return _pyau_swig.CAAudioUnit_HasCustomView(self)

    def Print(self, *args):
        return _pyau_swig.CAAudioUnit_Print(self, *args)
CAAudioUnit_swigregister = _pyau_swig.CAAudioUnit_swigregister
CAAudioUnit_swigregister(CAAudioUnit)

def CAAudioUnit_Open(inComp, outUnit):
    return _pyau_swig.CAAudioUnit_Open(inComp, outUnit)
CAAudioUnit_Open = _pyau_swig.CAAudioUnit_Open

class CAAUChanHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyau_swig.new_CAAUChanHelper(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyau_swig.delete_CAAUChanHelper
    __del__ = lambda self: None
    mChans = _swig_property(_pyau_swig.CAAUChanHelper_mChans_get, _pyau_swig.CAAUChanHelper_mChans_set)
    mNumEls = _swig_property(_pyau_swig.CAAUChanHelper_mNumEls_get, _pyau_swig.CAAUChanHelper_mNumEls_set)
CAAUChanHelper_swigregister = _pyau_swig.CAAUChanHelper_swigregister
CAAUChanHelper_swigregister(CAAUChanHelper)

class AHAudioUnit(CAAudioUnit):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyau_swig.new_AHAudioUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def LoadAUPresetFromFile(self, aupresetPath):
        return _pyau_swig.AHAudioUnit_LoadAUPresetFromFile(self, aupresetPath)

    def SaveAUPresetToFile(self, aupresetPath):
        return _pyau_swig.AHAudioUnit_SaveAUPresetToFile(self, aupresetPath)

    def GetParameterList(self, scope, element):
        return _pyau_swig.AHAudioUnit_GetParameterList(self, scope, element)

    def GetFactoryPresetList(self, scope, element):
        return _pyau_swig.AHAudioUnit_GetFactoryPresetList(self, scope, element)

    def GetName(self):
        return _pyau_swig.AHAudioUnit_GetName(self)

    def GetManu(self):
        return _pyau_swig.AHAudioUnit_GetManu(self)

    def GetView(self):
        return _pyau_swig.AHAudioUnit_GetView(self)
    __swig_destroy__ = _pyau_swig.delete_AHAudioUnit
    __del__ = lambda self: None
AHAudioUnit_swigregister = _pyau_swig.AHAudioUnit_swigregister
AHAudioUnit_swigregister(AHAudioUnit)

class AHTrack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    trackIndex_ = _swig_property(_pyau_swig.AHTrack_trackIndex__get, _pyau_swig.AHTrack_trackIndex__set)

    def __init__(self, synthDescription, graph, trackIndex):
        this = _pyau_swig.new_AHTrack(synthDescription, graph, trackIndex)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyau_swig.delete_AHTrack
    __del__ = lambda self: None

    def SetSynth(self, *args):
        return _pyau_swig.AHTrack_SetSynth(self, *args)

    def GetSynth(self):
        return _pyau_swig.AHTrack_GetSynth(self)

    def AddEffect(self, *args):
        return _pyau_swig.AHTrack_AddEffect(self, *args)

    def RemoveLastEffect(self):
        return _pyau_swig.AHTrack_RemoveLastEffect(self)

    def RemoveEffectAt(self, index):
        return _pyau_swig.AHTrack_RemoveEffectAt(self, index)

    def GetEffects(self):
        return _pyau_swig.AHTrack_GetEffects(self)

    def Arm(self):
        return _pyau_swig.AHTrack_Arm(self)

    def Unarm(self):
        return _pyau_swig.AHTrack_Unarm(self)

    def IsArmed(self):
        return _pyau_swig.AHTrack_IsArmed(self)
AHTrack_swigregister = _pyau_swig.AHTrack_swigregister
AHTrack_swigregister(AHTrack)

class AHHost(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _pyau_swig.new_AHHost()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyau_swig.delete_AHHost
    __del__ = lambda self: None

    def LoadMidiFile(self, midiFile):
        return _pyau_swig.AHHost_LoadMidiFile(self, midiFile)

    def Bounce(self):
        return _pyau_swig.AHHost_Bounce(self)

    def Play(self):
        return _pyau_swig.AHHost_Play(self)

    def PlayAndBlock(self):
        return _pyau_swig.AHHost_PlayAndBlock(self)

    def Stop(self):
        return _pyau_swig.AHHost_Stop(self)

    def AddTrack(self, *args):
        return _pyau_swig.AHHost_AddTrack(self, *args)

    def RemoveLastTrack(self):
        return _pyau_swig.AHHost_RemoveLastTrack(self)

    def GetTracks(self):
        return _pyau_swig.AHHost_GetTracks(self)

    def GetAHMidiPlayer(self):
        return _pyau_swig.AHHost_GetAHMidiPlayer(self)

    def GetAHGraph(self):
        return _pyau_swig.AHHost_GetAHGraph(self)

    def BounceToFile(self, wavPath):
        return _pyau_swig.AHHost_BounceToFile(self, wavPath)

    def ListenToMidi(self):
        return _pyau_swig.AHHost_ListenToMidi(self)

    def StopListeningToMidi(self):
        return _pyau_swig.AHHost_StopListeningToMidi(self)

    def IsListeningToMidi(self):
        return _pyau_swig.AHHost_IsListeningToMidi(self)

    def ResetAudioUnits(self):
        return _pyau_swig.AHHost_ResetAudioUnits(self)
    MidiReadProc = staticmethod(_pyau_swig.AHHost_MidiReadProc)
    PlayCallBack = staticmethod(_pyau_swig.AHHost_PlayCallBack)
AHHost_swigregister = _pyau_swig.AHHost_swigregister
AHHost_swigregister(AHHost)

def AHHost_MidiReadProc(pktlist, readProcRefCon, srcConnRefCon):
    return _pyau_swig.AHHost_MidiReadProc(pktlist, readProcRefCon, srcConnRefCon)
AHHost_MidiReadProc = _pyau_swig.AHHost_MidiReadProc

def AHHost_PlayCallBack(inRefCon, ioActionFlags, inTimeStamp, inBusNumber, inNumberFrames, ioData):
    return _pyau_swig.AHHost_PlayCallBack(inRefCon, ioActionFlags, inTimeStamp, inBusNumber, inNumberFrames, ioData)
AHHost_PlayCallBack = _pyau_swig.AHHost_PlayCallBack

class CAAUParameter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyau_swig.new_CAAUParameter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _pyau_swig.delete_CAAUParameter
    __del__ = lambda self: None

    def __lt__(self, a):
        return _pyau_swig.CAAUParameter___lt__(self, a)

    def __eq__(self, a):
        return _pyau_swig.CAAUParameter___eq__(self, a)

    def GetValue(self):
        return _pyau_swig.CAAUParameter_GetValue(self)

    def SetValue(self, inListener, inObject, inValue):
        return _pyau_swig.CAAUParameter_SetValue(self, inListener, inObject, inValue)

    def GetName(self):
        return _pyau_swig.CAAUParameter_GetName(self)

    def GetStringFromValueCopy(self, value=None):
        return _pyau_swig.CAAUParameter_GetStringFromValueCopy(self, value)

    def ValuesHaveStrings(self):
        return _pyau_swig.CAAUParameter_ValuesHaveStrings(self)

    def GetValueFromString(self, str):
        return _pyau_swig.CAAUParameter_GetValueFromString(self, str)

    def ParamInfo(self):
        return _pyau_swig.CAAUParameter_ParamInfo(self)

    def GetParamTag(self):
        return _pyau_swig.CAAUParameter_GetParamTag(self)

    def GetParamName(self, inIndex):
        return _pyau_swig.CAAUParameter_GetParamName(self, inIndex)

    def GetNumIndexedParams(self):
        return _pyau_swig.CAAUParameter_GetNumIndexedParams(self)

    def IsIndexedParam(self):
        return _pyau_swig.CAAUParameter_IsIndexedParam(self)

    def HasNamedParams(self):
        return _pyau_swig.CAAUParameter_HasNamedParams(self)

    def GetClumpID(self, outClumpID):
        return _pyau_swig.CAAUParameter_GetClumpID(self, outClumpID)

    def HasDisplayTransformation(self):
        return _pyau_swig.CAAUParameter_HasDisplayTransformation(self)

    def IsExpert(self):
        return _pyau_swig.CAAUParameter_IsExpert(self)
    Save = staticmethod(_pyau_swig.CAAUParameter_Save)
    Restore = staticmethod(_pyau_swig.CAAUParameter_Restore)
CAAUParameter_swigregister = _pyau_swig.CAAUParameter_swigregister
CAAUParameter_swigregister(CAAUParameter)

def CAAUParameter_Save(*args):
    return _pyau_swig.CAAUParameter_Save(*args)
CAAUParameter_Save = _pyau_swig.CAAUParameter_Save

def CAAUParameter_Restore(inData, outParam):
    return _pyau_swig.CAAUParameter_Restore(inData, outParam)
CAAUParameter_Restore = _pyau_swig.CAAUParameter_Restore

class AHParameter(CAAUParameter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyau_swig.new_AHParameter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def GetParameterID(self):
        return _pyau_swig.AHParameter_GetParameterID(self)
    __swig_destroy__ = _pyau_swig.delete_AHParameter
    __del__ = lambda self: None
AHParameter_swigregister = _pyau_swig.AHParameter_swigregister
AHParameter_swigregister(AHParameter)


def CountAudioUnits(AUType):
    return _pyau_swig.CountAudioUnits(AUType)
CountAudioUnits = _pyau_swig.CountAudioUnits

def GetCAComponentsForAUType(inAUType):
    return _pyau_swig.GetCAComponentsForAUType(inAUType)
GetCAComponentsForAUType = _pyau_swig.GetCAComponentsForAUType

def GetMatchingCAComponents(desc):
    return _pyau_swig.GetMatchingCAComponents(desc)
GetMatchingCAComponents = _pyau_swig.GetMatchingCAComponents

def PrintAllAudioUnits():
    return _pyau_swig.PrintAllAudioUnits()
PrintAllAudioUnits = _pyau_swig.PrintAllAudioUnits

def PrintCFStringRef(str):
    return _pyau_swig.PrintCFStringRef(str)
PrintCFStringRef = _pyau_swig.PrintCFStringRef

def printKeys(key, value, context):
    return _pyau_swig.printKeys(key, value, context)
printKeys = _pyau_swig.printKeys

def CFDictionaryShow(dict):
    return _pyau_swig.CFDictionaryShow(dict)
CFDictionaryShow = _pyau_swig.CFDictionaryShow

def PrintIfErr(arg1):
    return _pyau_swig.PrintIfErr(arg1)
PrintIfErr = _pyau_swig.PrintIfErr

def FindAudioUnitFromName(name, manu, desc_out):
    return _pyau_swig.FindAudioUnitFromName(name, manu, desc_out)
FindAudioUnitFromName = _pyau_swig.FindAudioUnitFromName


